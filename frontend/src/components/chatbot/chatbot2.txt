Ich erstelle die MongoDB-Anbindung für den Hardware-Shop Chatbot. Hier ist die komplette Implementation mit Frontend, Backend und Datenbankanbindung.

Zuerst das Backend Setup:

```javascript
// backend/.env
MONGODB_URI=mongodb://localhost:27017/hardware_shop
OPENAI_API_KEY=your-api-key
```

```javascript
// backend/models/Product.js
import mongoose from 'mongoose';

const productSchema = new mongoose.Schema({
  name: { type: String, required: true },
  category: { type: String, required: true },
  price: { type: Number, required: true },
  stock: { type: Number, required: true },
  specs: { type: Map, of: String },
  description: String,
  sku: { type: String, unique: true }
});

export default mongoose.model('Product', productSchema);
```

```javascript
// backend/db/connect.js
import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

export async function connectDB() {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('MongoDB connected successfully');
  } catch (error) {
    console.error('MongoDB connection error:', error);
    process.exit(1);
  }
}
```

Nun der Chatbot mit MongoDB und OpenAI Integration:

```tsx
import React, { useState, useRef, useEffect } from 'react';
import { Send, ShoppingCart, X, Loader } from 'lucide-react';

const HardwareShopBot = () => {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState('');
  const [isOpen, setIsOpen] = useState(false);
  const [loading, setLoading] = useState(false);
  const [cart, setCart] = useState([]);
  const [showCart, setShowCart] = useState(false);
  const [products, setProducts] = useState([]);
  const messagesEndRef = useRef(null);

  useEffect(() => {
    fetchInitialData();
  }, []);

  const fetchInitialData = async () => {
    try {
      const response = await fetch('/api/products/featured');
      const featuredProducts = await response.json();
      setProducts(featuredProducts);
      
      handleInitialMessage();
    } catch (error) {
      console.error('Error fetching initial data:', error);
    }
  };

  const handleInitialMessage = () => {
    const welcomeMessage = {
      text: "Willkommen! Ich bin Ihr Hardware-Berater. Wie kann ich Ihnen helfen?",
      sender: 'bot'
    };
    setMessages([welcomeMessage]);
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const processMessage = async (userInput) => {
    setLoading(true);
    try {
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ 
          message: userInput,
          context: messages.slice(-5) // Send last 5 messages for context
        }),
      });
      
      if (!response.ok) throw new Error('Network response was not ok');
      
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error:', error);
      return {
        text: "Entschuldigung, es gab ein technisches Problem. Bitte versuchen Sie es später noch einmal.",
        products: []
      };
    } finally {
      setLoading(false);
    }
  };

  const searchProducts = async (query) => {
    try {
      const response = await fetch(`/api/products/search?q=${encodeURIComponent(query)}`);
      const data = await response.json();
      return data;
    } catch (error) {
      console.error('Error searching products:', error);
      return [];
    }
  };

  const addToCart = async (product) => {
    try {
      const response = await fetch('/api/cart', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ productId: product._id }),
      });
      
      if (!response.ok) throw new Error('Failed to add to cart');
      
      setCart([...cart, product]);
      setMessages(prev => [...prev, {
        text: `${product.name} wurde zum Warenkorb hinzugefügt.`,
        sender: 'bot'
      }]);
    } catch (error) {
      console.error('Error adding to cart:', error);
      setMessages(prev => [...prev, {
        text: "Entschuldigung, das Produkt konnte nicht zum Warenkorb hinzugefügt werden.",
        sender: 'bot'
      }]);
    }
  };

  const removeFromCart = async (productId) => {
    try {
      const response = await fetch(`/api/cart/${productId}`, {
        method: 'DELETE',
      });
      
      if (!response.ok) throw new Error('Failed to remove from cart');
      
      setCart(cart.filter(item => item._id !== productId));
    } catch (error) {
      console.error('Error removing from cart:', error);
    }
  };

  const handleSend = async () => {
    if (!input.trim() || loading) return;

    const userMessage = { text: input, sender: 'user' };
    setMessages(prev => [...prev, userMessage]);
    setInput('');

    const aiResponse = await processMessage(input);
    
    if (aiResponse.searchProducts) {
      const products = await searchProducts(aiResponse.searchQuery);
      aiResponse.products = products;
    }

    setMessages(prev => [...prev, {
      text: aiResponse.text,
      sender: 'bot',
      products: aiResponse.products
    }]);
  };

  const ProductCard = ({ product }) => (
    <div className="border rounded-lg p-4 mb-2 bg-white">
      <div className="flex justify-between items-start">
        <div>
          <h4 className="font-bold">{product.name}</h4>
          <p className="text-sm text-gray-600">{product.category}</p>
          <div className="text-xs text-gray-500">
            {Object.entries(product.specs || {}).map(([key, value]) => (
              <div key={key}>{key}: {value}</div>
            ))}
          </div>
          <p className="text-lg font-bold mt-2">{product.price.toFixed(2)} €</p>
          <p className="text-sm text-gray-600">Verfügbar: {product.stock} Stück</p>
        </div>
        <button
          onClick={() => addToCart(product)}
          disabled={product.stock === 0}
          className={`px-4 py-2 rounded ${
            product.stock === 0 
              ? 'bg-gray-300 cursor-not-allowed' 
              : 'bg-green-500 hover:bg-green-600 text-white'
          }`}
        >
          <ShoppingCart className="w-5 h-5" />
        </button>
      </div>
    </div>
  );

  // Rest des UI-Codes bleibt größtenteils gleich...
  return (
    <div className="fixed bottom-4 right-4 z-50">
      {/* ... bisheriger UI-Code ... */}
    </div>
  );
};

export default HardwareShopBot;

```

Nun das Backend für die API-Endpunkte:

```javascript
// backend/routes/api.js
import express from 'express';
import { Configuration, OpenAIApi } from 'openai';
import Product from '../models/Product.js';

const router = express.Router();
const openai = new OpenAIApi(new Configuration({
  apiKey: process.env.OPENAI_API_KEY
}));

// Produkte suchen
router.get('/products/search', async (req, res) => {
  try {
    const { q } = req.query;
    const products = await Product.find({
      $or: [
        { name: { $regex: q, $options: 'i' } },
        { category: { $regex: q, $options: 'i' } },
        { description: { $regex: q, $options: 'i' } }
      ]
    });
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Featured Produkte
router.get('/products/featured', async (req, res) => {
  try {
    const products = await Product.find().limit(5);
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Chat-Endpoint
router.post('/chat', async (req, res) => {
  try {
    const { message, context } = req.body;

    // Hole relevante Produkte für Kontext
    const products = await Product.find({
      $or: [
        { name: { $regex: message, $options: 'i' } },
        { category: { $regex: message, $options: 'i' } }
      ]
    }).limit(5);

    const completion = await openai.createChatCompletion({
      model: "gpt-4",
      messages: [
        {
          role: "system",
          content: `Du bist ein Hardware-Experte in einem Computer Shop.
          Aktuelle Produkte: ${JSON.stringify(products)}
          
          Deine Aufgaben:
          1. Analysiere Kundenanfragen
          2. Gib fachlich korrekte Beratung
          3. Empfehle passende Produkte aus dem Sortiment
          4. Prüfe Kompatibilität
          5. Erkläre technische Details verständlich
          
          Format deine Antworten in natürlichem Deutsch.`
        },
        ...context.map(msg => ({
          role: msg.sender === 'user' ? 'user' : 'assistant',
          content: msg.text
        })),
        { role: "user", content: message }
      ],
      temperature: 0.7,
      max_tokens: 500
    });

    res.json({
      text: completion.data.choices[0].message.content,
      products: products.length > 0 ? products : undefined,
      searchProducts: message.toLowerCase().includes('suche'),
      searchQuery: message
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Warenkorb-Endpoints
router.post('/cart', async (req, res) => {
  try {
    const { productId } = req.body;
    const product = await Product.findById(productId);
    if (!product) throw new Error('Product not found');
    if (product.stock < 1) throw new Error('Product out of stock');
    
    // Hier könnten Sie den Warenkorb in der Session oder DB speichern
    
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

router.delete('/cart/:productId', async (req, res) => {
  try {
    const { productId } = req.params;
    // Hier könnten Sie das Produkt aus dem Warenkorb in der Session oder DB entfernen
    res.json({ success: true });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

export default router;
```

Beispiel für einen Seed-Script zum Befüllen der Datenbank:

```javascript
// backend/scripts/seed.js
import { connectDB } from '../db/connect.js';
import Product from '../models/Product.js';

const products = [
  {
    name: "GeForce RTX 4090",
    category: "Grafikkarten",
    price: 1599.99,
    stock: 5,
    specs: {
      vram: "24GB GDDR6X",
      boost: "2.52 GHz",
      tdp: "450W"
    },
    description: "NVIDIA's schnellste Gaming-Grafikkarte",
    sku: "RTX4090-001"
  },
  // Weitere Produkte...
];

async function seedDB() {
  try {
    await connectDB();
    await Product.deleteMany({}); // Vorsicht: Löscht alle existierenden Produkte
    await Product.insertMany(products);
    console.log('Database seeded successfully');
    process.exit(0);
  } catch (error) {
    console.error('Error seeding database:', error);
    process.exit(1);
  }
}

seedDB();
```

Um das System zu starten:

1. MongoDB starten
2. Backend starten:
```bash
cd backend
npm install
node scripts/seed.js # Optional: Datenbank mit Testdaten füllen
npm start
```

3. Frontend starten:
```bash
cd frontend
npm install
npm start
```

Der Chatbot bietet nun:
- Vollständige MongoDB-Integration
- Echtzeitsuche im Produktkatalog
- OpenAI-gestützte Beratung
- Session-basierter Warenkorb
- Bestandsmanagement

Möchten Sie weitere Details zu einer bestimmten Komponente oder Hilfe bei der Implementierung?